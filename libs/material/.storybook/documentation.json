{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8d0d6a0c8bac179014cdff3d1e08f74afe5a1f7a4c2e43af000a316afd166e9d37ce15ba272e703323b6740ca4a2fee343c15681d7e88e3e028f9fc740c8d492",
            "file": "libs/material/src/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tb-button,button[tb-basic-button],button[tb-raised-button],button[tb-stroked-button],button[tb-flat-button]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"buttonType\">\n  <button #button (click)=\"emit()\">\n    {{ label }}\n  </button>\n</ng-container>\n<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton type",
                    "description": "<p>Button type</p>\n",
                    "line": 41,
                    "type": "ButtonType",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton color",
                    "description": "<p>Button color</p>\n",
                    "line": 44,
                    "type": "ColorType",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nButton label",
                    "description": "<p>Button label</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter<ButtonEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nClick Event",
                    "description": "<p>Click Event</p>\n",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "emit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmit click event",
                    "description": "<p>Emit click event</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { ButtonType, ColorType } from '../api';\nimport { CommonModule } from '@angular/common';\n\nexport type ButtonEvent = { type: 'click'; payload: string };\n\n@Component({\n  selector:\n    'tb-button,button[tb-basic-button],button[tb-raised-button],button[tb-stroked-button],button[tb-flat-button]',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <ng-container *ngIf=\"buttonType\">\n      <button #button (click)=\"emit()\">\n        {{ label }}\n      </button>\n    </ng-container>\n    <ng-content></ng-content>\n  `,\n})\nexport class ButtonComponent implements AfterViewInit {\n  /** @ignore */\n  @ViewChild('button') button?: ElementRef<HTMLButtonElement>;\n\n  /** Button label */\n  @Input() label = 'Button';\n\n  /** Button type */\n  @Input() buttonType?: ButtonType;\n\n  /** Button color */\n  @Input() color: ColorType = 'primary';\n\n  /** Click Event  */\n  @Output() readonly clickEvent = new EventEmitter<ButtonEvent>();\n\n  constructor(private readonly detection: ChangeDetectorRef) {}\n  /** @ignore */\n  ngAfterViewInit(): void {\n    if (this.buttonType) {\n      this.addClass(this.color);\n\n      if (this.buttonType) {\n        this.checkAdd(this.buttonType === 'basic', 'basic-button');\n        this.checkAdd(this.buttonType === 'flat', 'flat-button');\n        this.checkAdd(this.buttonType === 'raised', 'raised-button');\n        this.checkAdd(this.buttonType === 'stroked', 'stroked-button');\n        this.checkAdd(this.buttonType === 'icon', 'icon-button');\n        this.checkAdd(this.buttonType === 'fab', 'fab-button');\n        this.checkAdd(this.buttonType === 'mini-fab', 'mini-fab-button');\n      }\n    }\n  }\n\n  /** @ignore */\n  private addClass(className: string) {\n    this.button?.nativeElement.classList.add(className);\n  }\n\n  /** @ignore */\n  private checkAdd(condition: boolean, className: string) {\n    if (condition) {\n      this.addClass(className);\n    }\n  }\n\n  /** Emit click event */\n  emit() {\n    this.clickEvent.emit({ type: 'click', payload: this.label });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "detection",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "detection",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "ButtonDocComponent",
            "id": "component-ButtonDocComponent-46fd734e700f8d928a127877c899dde9d85b873500e47b6957e736ddc2dba6d981ddbc394e5cef106882362979eb8d5986df1188ddb55a9f1650ec5b41fc5758",
            "file": "libs/material/src/button-doc/button-doc.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tb-button-doc",
            "styleUrls": [],
            "styles": [
                "\n      pre {\n        font-size: 0.7em;\n      }\n    "
            ],
            "templateUrl": [
                "./button-doc.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter<ButtonEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "handleEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "ButtonEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ButtonEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent, ButtonEvent } from '../button/button.component';\n\n@Component({\n  selector: 'tb-button-doc',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  templateUrl: './button-doc.component.html',\n  styles: [\n    `\n      pre {\n        font-size: 0.7em;\n      }\n    `,\n  ],\n})\nexport class ButtonDocComponent {\n  @Output() clickEvent = new EventEmitter<ButtonEvent>();\n  /** @ignore */\n  @Input() label = 'Button';\n  counter = 0;\n  handleEvent(event: ButtonEvent) {\n    this.counter += 1;\n    this.clickEvent.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      pre {\n        font-size: 0.7em;\n      }\n    \n",
            "templateData": "<tb-button\n  buttonType=\"raised\"\n  color=\"primary\"\n  [label]=\"label + ' ' + counter\"\n  (clickEvent)=\"emit($event)\"\n></tb-button>\n"
        },
        {
            "name": "ColorsComponent",
            "id": "component-ColorsComponent-9c22d8b09f86288424faad85b5cd673d5e0ae49eb239082cb6dd47891e1eb5f83c7ef5c3bf3650ca383e1df4cd8b1d5b04ad179338a1da358a3b1df5cf5f07fa",
            "file": "libs/material/src/colors/colors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tb-colors",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./colors.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\n    'primary',\n    'secondary',\n    'accent',\n    'warn',\n    'red',\n    'green',\n    'black',\n    'white',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "colorVariants",
                    "defaultValue": "this.colors.map((e) => [\n    e,\n    ...[\n      'light',\n      'lighter',\n      'dark',\n      'darker',\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n    ].map((v) => e + '-' + v),\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'tb-colors',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './colors.component.html',\n  styles: [],\n})\nexport class ColorsComponent {\n  colors = [\n    'primary',\n    'secondary',\n    'accent',\n    'warn',\n    'red',\n    'green',\n    'black',\n    'white',\n  ];\n  colorVariants = this.colors.map((e) => [\n    e,\n    ...[\n      'light',\n      'lighter',\n      'dark',\n      'darker',\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n    ].map((v) => e + '-' + v),\n  ]);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"flex column gap-3 center\">\n  <div\n    class=\"flex gap-3 wrap\"\n    *ngFor=\"let variants of colorVariants\"\n  >\n    <div\n      class=\"flex  bg-{{ color }} {{ color }}-face text-center center\"\n      *ngFor=\"let color of variants\"\n      style=\"width: 100px; height: 100px\"\n    >\n      <span> .{{ color }} </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FontsComponent",
            "id": "component-FontsComponent-b16a2345b36ea2504dc4073f7f4717bd752e3ae060dcda6fcb60804c0c3fdb6c8ab58bdf9ef33904eeae8519754753b39112aa7bc02039b0f1d0ad1061771784",
            "file": "libs/material/src/fonts/fonts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tb-fonts",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fonts.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'tb-fonts',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './fonts.component.html',\n  styles: [],\n})\nexport class FontsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<article style=\"font-size: 16px\">\n  <h1 class=\"title-1\" substring=\"Built by Ahmet Emrebas\">\n    Welcome to techbir angular material\n  </h1>\n\n  <div class=\"subtitle-1\">Let's learn how to structure our project.</div>\n\n  <div class=\"content-1\">\n    First is first. Let's install required tools and configure them. First is\n    first. Let's install required tools and configure them. First is first.\n    Let's install required tools and configure them. First is first. Let's\n    install required tools and configure them. First is first. Let's install\n    required tools and configure them.\n  </div>\n\n  <hr />\n  <h1 class=\"title-2\" substring=\"Built by Ahmet Emrebas\">\n    Welcome to techbir angular material\n  </h1>\n\n  <div class=\"subtitle-2\">Let's learn how to structure our project.</div>\n\n  <div class=\"content-2\">\n    First is first. Let's install required tools and configure them. First is\n    first. Let's install required tools and configure them. First is first.\n    Let's install required tools and configure them. First is first. Let's\n    install required tools and configure them. First is first. Let's install\n    required tools and configure them.\n  </div>\n</article>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n    buttonType: 'raised',\n    color: 'primary',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const buttonElement = canvas.getByText(/Button/gi);\n    expect(buttonElement).toBeTruthy();\n    userEvent.hover(buttonElement);\n    userEvent.click(buttonElement);\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Label',\n  },\n  play: async ({ canvasElement, args }) => {\n    const canvas = within(canvasElement);\n    const button = () => canvas.getByText(/Label/gi);\n\n    expect(button()).toBeTruthy();\n    expect(button().innerText).toBe('Label 0');\n\n    userEvent.click(button(), { delay: 1000 });\n    userEvent.click(button(), { delay: 2000 });\n    userEvent.click(button(), { delay: 3000 });\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/colors works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fonts works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  component: ButtonComponent,\n  title: 'ButtonComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonDocComponent>",
                "defaultValue": "{\n  component: ButtonDocComponent,\n  title: 'ButtonDocComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorsComponent>",
                "defaultValue": "{\n  component: ColorsComponent,\n  title: 'ColorsComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FontsComponent>",
                "defaultValue": "{\n  component: FontsComponent,\n  title: 'FontsComponent',\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n    buttonType: 'raised',\n    color: 'primary',\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/material/src/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "ButtonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"raised\" | \"flat\" | \"stroked\" | \"icon\" | \"fab\" | \"mini-fab\"",
                "file": "libs/material/src/api/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "ColorType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"accent\" | \"warn\" | \"red\" | \"green\" | \"black\" | \"white\"",
                "file": "libs/material/src/api/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonDocComponent>",
                "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorsComponent>",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FontsComponent>",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/material/src/button/button.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n    buttonType: 'raised',\n    color: 'primary',\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const buttonElement = canvas.getByText(/Button/gi);\n    expect(buttonElement).toBeTruthy();\n    userEvent.hover(buttonElement);\n    userEvent.click(buttonElement);\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  component: ButtonComponent,\n  title: 'ButtonComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n    buttonType: 'raised',\n    color: 'primary',\n  },\n}"
                }
            ],
            "libs/material/src/button-doc/button-doc.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Label',\n  },\n  play: async ({ canvasElement, args }) => {\n    const canvas = within(canvasElement);\n    const button = () => canvas.getByText(/Label/gi);\n\n    expect(button()).toBeTruthy();\n    expect(button().innerText).toBe('Label 0');\n\n    userEvent.click(button(), { delay: 1000 });\n    userEvent.click(button(), { delay: 2000 });\n    userEvent.click(button(), { delay: 3000 });\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonDocComponent>",
                    "defaultValue": "{\n  component: ButtonDocComponent,\n  title: 'ButtonDocComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/src/colors/colors.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/colors works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorsComponent>",
                    "defaultValue": "{\n  component: ColorsComponent,\n  title: 'ColorsComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/src/fonts/fonts.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fonts works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FontsComponent>",
                    "defaultValue": "{\n  component: FontsComponent,\n  title: 'FontsComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/material/src/button/button.component.ts": [
                {
                    "name": "ButtonEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/material/src/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "libs/material/src/api/types.ts": [
                {
                    "name": "ButtonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"raised\" | \"flat\" | \"stroked\" | \"icon\" | \"fab\" | \"mini-fab\"",
                    "file": "libs/material/src/api/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "ColorType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"accent\" | \"warn\" | \"red\" | \"green\" | \"black\" | \"white\"",
                    "file": "libs/material/src/api/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "libs/material/src/button/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "libs/material/src/button-doc/button-doc.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonDocComponent>",
                    "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "libs/material/src/colors/colors.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorsComponent>",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "libs/material/src/fonts/fonts.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FontsComponent>",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button-doc/button-doc.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonDocComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FontsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}