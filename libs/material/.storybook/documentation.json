{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-3968c477b23a9ec500050fd0c0698e09418e3cecdaeb339a7d549857f0ceb6616c45c95c1c237af31e8acf40a7f14a1f21a724fc331158126e8ab013e8e0ae95",
            "file": "libs/material/src/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[tb-basic-button],[tb-raised-button],[tb-stroked-button],[tb-flat-button]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: '[tb-basic-button],[tb-raised-button],[tb-stroked-button],[tb-flat-button]',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ButtonDocComponent",
            "id": "component-ButtonDocComponent-3a8caa1bf25e20341595761a34ff75fc0dcbe2dcca4b52509e337cfa6e1498435bbd4482506bf38fadf117afd329ce5670d7064acc24b9a18e9a414b1921829d",
            "file": "libs/material/src/button-doc/button-doc.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tb-button-doc",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button-doc.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from '../button/button.component';\n\n@Component({\n  selector: 'tb-button-doc',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  templateUrl: './button-doc.component.html',\n  styles: [],\n})\nexport class ButtonDocComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"flex column gap-12 wrap\">\n  <div class=\"flex column gap-4\">\n    <h1 class=\"title-2 text-center\" substring=\".tb-basic-button\">\n      Basic Button\n    </h1>\n    <div class=\"flex row gap-3 wrap\">\n      <button tb-basic-button color=\"primary\">basic primary</button>\n      <button tb-basic-button color=\"secondary\">basic secondary</button>\n      <button tb-basic-button color=\"accent\">basic accent</button>\n      <button tb-basic-button color=\"warn\">basic warn</button>\n      <button tb-basic-button color=\"red\">basic red</button>\n      <button tb-basic-button color=\"green\">basic green</button>\n      <button tb-basic-button color=\"black\">basic black</button>\n      <button tb-basic-button color=\"white\">basic white</button>\n    </div>\n  </div>\n  <div class=\"flex column gap-4\">\n    <h1 class=\"title-2 text-center\" substring=\".tb-raised-button\">\n      raised Button\n    </h1>\n    <div class=\"flex row gap-3 wrap\">\n      <button tb-raised-button color=\"primary\">raised primary</button>\n      <button tb-raised-button color=\"secondary\">raised secondary</button>\n      <button tb-raised-button color=\"accent\">raised accent</button>\n      <button tb-raised-button color=\"warn\">raised warn</button>\n      <button tb-raised-button color=\"red\">raised red</button>\n      <button tb-raised-button color=\"green\">raised green</button>\n      <button tb-raised-button color=\"black\">raised black</button>\n      <button tb-raised-button color=\"white\">raised white</button>\n    </div>\n  </div>\n  <div class=\"flex column gap-4\">\n    <h1 class=\"title-2 text-center\" substring=\".tb-flat-button\">flat Button</h1>\n    <div class=\"flex row gap-3 wrap\">\n      <button tb-flat-button color=\"primary\">flat primary</button>\n      <button tb-flat-button color=\"secondary\">flat secondary</button>\n      <button tb-flat-button color=\"accent\">flat accent</button>\n      <button tb-flat-button color=\"warn\">flat warn</button>\n      <button tb-flat-button color=\"red\">flat red</button>\n      <button tb-flat-button color=\"green\">flat green</button>\n      <button tb-flat-button color=\"black\">flat black</button>\n      <button tb-flat-button color=\"white\">flat white</button>\n    </div>\n  </div>\n  <div class=\"flex column gap-4\">\n    <h1 class=\"title-2 text-center\" substring=\".tb-basic-button\">\n      stroked Button\n    </h1>\n    <div class=\"flex row gap-3 wrap\">\n      <button tb-stroked-button color=\"primary\">stroked primary</button>\n      <button tb-stroked-button color=\"secondary\">stroked secondary</button>\n      <button tb-stroked-button color=\"accent\">stroked accent</button>\n      <button tb-stroked-button color=\"warn\">stroked warn</button>\n      <button tb-stroked-button color=\"red\">stroked red</button>\n      <button tb-stroked-button color=\"green\">stroked green</button>\n      <button tb-stroked-button color=\"black\">stroked black</button>\n      <button tb-stroked-button color=\"white\">stroked white</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ColorsComponent",
            "id": "component-ColorsComponent-9c22d8b09f86288424faad85b5cd673d5e0ae49eb239082cb6dd47891e1eb5f83c7ef5c3bf3650ca383e1df4cd8b1d5b04ad179338a1da358a3b1df5cf5f07fa",
            "file": "libs/material/src/colors/colors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tb-colors",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./colors.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\n    'primary',\n    'secondary',\n    'accent',\n    'warn',\n    'red',\n    'green',\n    'black',\n    'white',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "colorVariants",
                    "defaultValue": "this.colors.map((e) => [\n    e,\n    ...[\n      'light',\n      'lighter',\n      'dark',\n      'darker',\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n    ].map((v) => e + '-' + v),\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'tb-colors',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './colors.component.html',\n  styles: [],\n})\nexport class ColorsComponent {\n  colors = [\n    'primary',\n    'secondary',\n    'accent',\n    'warn',\n    'red',\n    'green',\n    'black',\n    'white',\n  ];\n  colorVariants = this.colors.map((e) => [\n    e,\n    ...[\n      'light',\n      'lighter',\n      'dark',\n      'darker',\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n    ].map((v) => e + '-' + v),\n  ]);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"flex column gap-3 center\">\n  <div\n    class=\"flex gap-3 wrap\"\n    *ngFor=\"let variants of colorVariants\"\n  >\n    <div\n      class=\"flex  bg-{{ color }} {{ color }}-face text-center center\"\n      *ngFor=\"let color of variants\"\n      style=\"width: 100px; height: 100px\"\n    >\n      <span> .{{ color }} </span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FontsComponent",
            "id": "component-FontsComponent-b16a2345b36ea2504dc4073f7f4717bd752e3ae060dcda6fcb60804c0c3fdb6c8ab58bdf9ef33904eeae8519754753b39112aa7bc02039b0f1d0ad1061771784",
            "file": "libs/material/src/fonts/fonts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tb-fonts",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fonts.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'tb-fonts',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './fonts.component.html',\n  styles: [],\n})\nexport class FontsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<article style=\"font-size: 16px\">\n  <h1 class=\"title-1\" substring=\"Built by Ahmet Emrebas\">\n    Welcome to techbir angular material\n  </h1>\n\n  <div class=\"subtitle-1\">Let's learn how to structure our project.</div>\n\n  <div class=\"content-1\">\n    First is first. Let's install required tools and configure them. First is\n    first. Let's install required tools and configure them. First is first.\n    Let's install required tools and configure them. First is first. Let's\n    install required tools and configure them. First is first. Let's install\n    required tools and configure them.\n  </div>\n\n  <hr />\n  <h1 class=\"title-2\" substring=\"Built by Ahmet Emrebas\">\n    Welcome to techbir angular material\n  </h1>\n\n  <div class=\"subtitle-2\">Let's learn how to structure our project.</div>\n\n  <div class=\"content-2\">\n    First is first. Let's install required tools and configure them. First is\n    first. Let's install required tools and configure them. First is first.\n    Let's install required tools and configure them. First is first. Let's\n    install required tools and configure them. First is first. Let's install\n    required tools and configure them.\n  </div>\n</article>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/button works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/colors works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "Heading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fonts works!/gi)).toBeTruthy();\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonDocComponent>",
                "defaultValue": "{\n  component: ButtonDocComponent,\n  title: 'ButtonDocComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  component: ButtonComponent,\n  title: 'ButtonComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorsComponent>",
                "defaultValue": "{\n  component: ColorsComponent,\n  title: 'ColorsComponent',\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<FontsComponent>",
                "defaultValue": "{\n  component: FontsComponent,\n  title: 'FontsComponent',\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "libs/material/src/button/button.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorsComponent>",
                "file": "libs/material/src/colors/colors.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<FontsComponent>",
                "file": "libs/material/src/fonts/fonts.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "libs/material/src/button/button.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/button works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  component: ButtonComponent,\n  title: 'ButtonComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/src/colors/colors.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/colors works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorsComponent>",
                    "defaultValue": "{\n  component: ColorsComponent,\n  title: 'ColorsComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/src/fonts/fonts.component.stories.ts": [
                {
                    "name": "Heading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(/fonts works!/gi)).toBeTruthy();\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<FontsComponent>",
                    "defaultValue": "{\n  component: FontsComponent,\n  title: 'FontsComponent',\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n}"
                }
            ],
            "libs/material/src/button-doc/button-doc.component.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/material/src/button-doc/button-doc.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonDocComponent>",
                    "defaultValue": "{\n  component: ButtonDocComponent,\n  title: 'ButtonDocComponent',\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "libs/material/src/button/button.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "libs/material/src/button/button.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "libs/material/src/colors/colors.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorsComponent>",
                    "file": "libs/material/src/colors/colors.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "libs/material/src/fonts/fonts.component.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<FontsComponent>",
                    "file": "libs/material/src/fonts/fonts.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "libs/material/src/button-doc/button-doc.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button-doc/button-doc.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonDocComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/colors/colors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Heading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/material/src/fonts/fonts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FontsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}